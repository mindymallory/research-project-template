source('data-raw/fetch-raw-data.R')
SX2016
SX2016['2015-01-01/2016-04-25', 'Settle]
g
''
]
jhj
'
SX2016['2015-01-01/2016-04-25', 'Settle']
# Fetch Corn and Soybean Prices
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
View(CZ2016)
source('data-raw/fetch-raw-data.R')
corn.adf <- ur.ca(CZ2016)
library(urca)
install.packages("urca")
library(urca)
corn.adf <- ur.ca(CZ2016)
source('data-raw/fetch-raw-data.R')
corn.adf <- ur.df(CZ2016)
summary(corn.adf)
adf <- list()
adf[[1]] <- ur.df(CZ2016)
adf <- list()
adf[[1]] <- ur.df(CZ2016)
adf[[2]] <- ur.df(SX2016)
summary(adf[[1]])
summary(adf[[2]])
jct      <- ca.jo(cbind(CZ2016, SX2016))
summary(jct)
save(adf, jct, file = 'analysis-output/results.rda')
s
load('analysis-output/results.Rda').
load('analysis-output/results.Rda')
header-includes: \usepackage{setspace} \doublespacing
library(urca)
# This line runs the source code that fetched your raw data and cleaned it. Now it is available
# for conducting analysis.
source('data-raw/fetch-raw-data.R')
View(CZ2016)
format(Sys.time(), "%B %d, %Y")
format(Sys.time(), "%Y-%m-%d")
today <- format(Sys.time(), "%Y-%m-%d")
CZ2016 <- CZ2016[paste('2015-01-01/',today)]
View(CZ2016)
paste('2015-01-01/',today)
today <- format(Sys.time(),"%Y-%m-%d")
today
CZ2016 <- CZ2016[paste('2015-01-01/',today)]
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects, and keep only settlement prices
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
today <- format(Sys.time(),"%Y-%m-%d")
CZ2016 <- CZ2016[paste('2015-01-01/',today)]
paste('2015-01-01/',today)
CZ2016 <- CZ2016[paste0('2015-01-01/',today)]
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects, and keep only settlement prices
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
today <- format(Sys.time(),"%Y-%m-%d")
CZ2016 <- CZ2016[paste0('2015-01-01/',today)]
View(CZ2016)
CZ2016 <- CZ2016[paste0(start,'/',today)]
start <- '2015-01-01'
today <- format(Sys.time(),"%Y-%m-%d")
CZ2016 <- CZ2016[paste0(start,'/',today)]
SX2016 <- CZ2016[paste0(start,'/',today)]
View(SX2016)
library(urca)
# This line runs the source code that fetched your raw data and cleaned it. Now it is available
# for conducting analysis.
source('data-raw/fetch-raw-data.R')
# Store results of ADF tests for Corn and Soybeans in a list
adf      <- list()
adf[[1]] <- ur.df(CZ2016)
adf[[2]] <- ur.df(SX2016)
# Store results of a Johansen cointegration test for Corn and Soybeans
jct      <- ca.jo(cbind(CZ2016, SX2016))
# Save these results so that it can be pulled into the manuscript without re-running analysis.
save(adf, jct, file = 'analysis-output/results.rda')
source('data-raw/fetch-raw-data.R')
# Store results of ADF tests for Corn and Soybeans in a list
adf      <- list()
adf[[1]] <- ur.df(CZ2016)
adf[[2]] <- ur.df(SX2016)
# Store results of a Johansen cointegration test for Corn and Soybeans
jct      <- ca.jo(cbind(CZ2016, SX2016))
cbind(CZ2016, SX2016)
source('data-raw/fetch-raw-data.R')
# Store results of ADF tests for Corn and Soybeans in a list
adf      <- list()
adf[[1]] <- ur.df(CZ2016)
adf[[2]] <- ur.df(SX2016)
# Store results of a Johansen cointegration test for Corn and Soybeans
jct      <- ca.jo(cbind(CZ2016, SX2016))
save(adf, jct, file = 'analysis-output/results.rda')
?ur.df
# This file performs statistical analysis. It could be just one file, so it doesn't neccessarly
adf[[1]] <- ur.df(CZ2016, type = 'none', lags = 5)
summary(adf[[1]])
adf[[2]] <- ur.df(SX2016, type = 'none', lags = 5)
?jct
?ca.jo
jct      <- ca.jo(cbind(CZ2016, SX2016), type = 'eigen', K = 5)
# Save these results so that it can be pulled into the manuscript without re-running analysis.
save(adf, jct, file = 'analysis-output/results.rda')
?ur.df
# This line runs the source code that fetched your raw data and cleaned it. Now it is available
# for conducting analysis.
source('data-raw/fetch-raw-data.R')
# Store results of ADF tests for Corn and Soybeans in a list
adf      <- list()
adf[[1]] <- ur.df(CZ2016, type = 'trend', lags = 5)
adf[[2]] <- ur.df(SX2016, type = 'trend', lags = 5)
# Store results of a Johansen cointegration test for Corn and Soybeans
jct      <- ca.jo(cbind(CZ2016, SX2016), type = 'eigen', K = 5)
# Save these results so that it can be pulled into the manuscript without re-running analysis.
save(adf, jct, file = 'analysis-output/results.rda')
# This line runs the source code that fetched your raw data and cleaned it. Now it is available
# for conducting analysis.
source('data-raw/fetch-raw-data.R')
# Store results of ADF tests for Corn and Soybeans in a list
adf      <- list()
adf[[1]] <- ur.df(CZ2016, type = 'drift', lags = 5)
adf[[2]] <- ur.df(SX2016, type = 'drift', lags = 5)
# Store results of a Johansen cointegration test for Corn and Soybeans
jct      <- ca.jo(cbind(CZ2016, SX2016), type = 'eigen', K = 5)
# Save these results so that it can be pulled into the manuscript without re-running analysis.
save(adf, jct, file = 'analysis-output/results.rda')
summary(adf[[1]])
summary(adf[[1]])$coef
adf
adf[[1]]
attributes(adf[[1]])
adf[[1]]$coef
adf[[1]]$test.name
temp <- adf[[1]]
temp$testreg
temp@testreg
temp@coef
temp@teststat
class(temp@teststat)
temp@teststat[1,1]
adf[[1]]@teststat[1,1]
adf[[1]]@testreg
class(adf[[1]]@testreg)
install.packages("memisc")
install.packages("stargazer")
library("stargazer", lib.loc="~/R/win-library/3.2")
stargazer(adf[[1]], title = "Regression Results", align = TRUE)
install.packages("texreg")
texreg(adf[[1]])
library(texreg)
texreg(adf[[1]])
texreg(adf[[1]]@testreg)
jct
summary(jct)
install.packages("vars")
library(vars)
VAR(cbind(CZ2016, SX2016))
VARselect(cbind(CZ2016, SX2016))
VARselect(cbind(CZ2016, SX2016), lag.max = 8)
var-model <- VAR(cbind(CZ2016, SX2016), p = 1, type = "const")
lag_selection <- VARselect(cbind(CZ2016, SX2016), lag.max = 8)
var_model <- VAR(cbind(CZ2016, SX2016), p = 1, type = "const")
stargazer(CZ2016)
stargazer(var_model)
summary(var_model)
var_model$coef
attributes(var_model)
var_model$varresult
var_model$datamat
var_model$varresult$..1
attributes(var_model$varresult$..1)
attributes(var_model$varresult$..1$coefficients)
var_model$varresult$..1$coefficients
var_model$varresult$..1$assign
var_model$varresult$..1$qr
attributes(var_model$varresult$..1$coefficients)
attributes(var_model$varresult$..1)
var_model$varresult$..1$effects
attributes(var_model$varresult$..1)
var_model$varresult$..1$xlevels
var_model$varresult$..1$call
var_model$varresult$..1$terms
attributes(var_model$varresult$..1)
var_model$varresult$..1$model
attributes(var_model$varresult$..1)
summary(var_model)
lag_selection
summary(lag_selection)
summary(var_model)
# Fit a VAR
lag_selection <- VARselect(cbind(CZ2016, SX2016), lag.max = 8)
var_model <- VAR(cbind(CZ2016, SX2016), p = 1, type = "const")
# Save these results so that it can be pulled into the manuscript without re-running analysis.
save(adf, jct, lag_selection, var_model, file = 'analysis-output/results.rda')
irf(var_model)
plot(irf(var_model))
plot.irf(irf(var_model))
install.packages("msbvar")
install.packages("MSBVAR")
plot.irf(var_model)
library(MSBVAR)
plot.irf(var_model)
plot.irf(var_model)
plot.irf(var_model)
plot.irf(irf(var_model)
)
plot.irf(irf(var_model))
adf
adf[[1]]$coef
adf[[1]]@coef
adf[[1]]@coeficients
attrtibutes(adf[[1]])
attributes(adf[[1]])
adf[[1]]@teststat[1]
summary(adf[[2]])
adf[[2]]
adf[[2]]@testreg
adf[[2]]
dt(adf[[1]]@teststat[1], df = 6)
dt(adf[[2]]@teststat[1], df = 6)
dt(adf[[2]]@teststat[1], df = 7)
dt(adf[[2]]@teststat[1], df = 8)
dt(adf[[2]]@teststat[1], df = 300)
dt(adf[[2]]@teststat[1], df = 319)
adf[[1]]
adf[[1]]@testreg
dt(adf[[2]]@teststat[1], df = 319)
readlines(adf[[1]]@testreg, 5)
readLines(adf[[1]]@testreg, 5)
save(adf[[1]]@testreg, file = 'analysis-output/reg_results.rda')
readLines('analysis-output/reg_results.rda', 5)
save(adf[[1]]@testreg, file = 'analysis-output/reg_results.rda')
adf[[1]]@testreg
temp <- adf[[1]]@testreg
save(temp, file = 'analysis-output/reg_results.rda')
save(text_reg, file = 'analysis-output/reg_results.rda')
text_reg <- adf[[1]]@testreg
save(text_reg, file = 'analysis-output/reg_results.rda')
readLines('analysis-output/reg_results.rda', 5)
readLines('analysis-output/reg_results.rda', 20)
text_reg <- adf[[1]]@testreg
save(text_reg, file = 'analysis-output/reg_results.txt')
readLines('analysis-output/reg_results.txt', 20)
adf[[1]]@testreg$df
adf[[1]]@testreg$cov.unscaled
text_reg <- adf[[1]]@testreg
text_reg
class(text_reg)
xtable(text_reg)
library(xtable)
xtable(text_reg)
load('analysis-output/results.Rda')
t[[1]] <- xtable(adf[[1]]@testreg, caption = "ADF Results for Corn")
library(xtable)
t = list()
t[[1]] <- xtable(adf[[1]]@testreg, caption = "ADF Results for Corn")
t[[2]] <- xtable(adf[[2]]@testreg, caption = "ADF Results for Soybeans")
print.xtable(t, caption.placement = 'top', comment = FALSE)
library(stargazer)
stargazer(adf[[1]]@testreg, title = "ADF Results")
library(texreg)
texreg(adf[[1]]@testreg)
attributes(adf[[1]])
library(ggplot2)
View(CZ2016)
source('data-raw/fetch-raw-data.R')
View(CZ2016)
dailyaveprice <- ggplot(CZ2016) +
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
plot.margin = unit(c(0, 1, 0, 1), "lines"),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailyaveprice <- ggplot(CZ2016) +
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailysettleprice <- ggplot(CZ2016) +
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailysettleprice
qplot(CZ2016)
index(CZ2016)
dailysettleprice <- ggplot(CZ2016, aes(index(CZ2016), V1)) +
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailysettleprice
dailysettleprice <- ggplot(CZ2016, aes(index(CZ2016), V1)) + geom_line()
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailysettleprice
dailysettleprice <- ggplot(CZ2016, aes(index(CZ2016), 'V1')) + geom_line()
scale_colour_grey() +
scale_size_area() +
ylab("Price (cents/bu") +
theme_bw(base_size = 8) +
theme(axis.text.x=element_blank(), axis.title.x=element_blank(),
panel.background = element_rect(fill = 'white'),
panel.grid.major = element_line(colour = 'white'),
panel.grid.minor = element_line(colour = 'white'),
legend.position = "none")
dailysettleprice
ggfortify
install.packages("ggfortify")
library(ggfortify)
autoplot(CZ2016)
p1 <- autoplot(CZ2016)
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
plot2 <- autoplot(SX2016)
plot1 <- autoplot(CZ2016)
grid.arrange(plot1, plot2, ncol=1)
grid.arrange(plot1, plot2, ncol=2)
library(urca)
library(vars)
# This line runs the source code that fetched your raw data and cleaned it. Now it is available
# for conducting analysis.
source('data-raw/fetch-raw-data.R')
library(RCurl)
library(xts)
# Define Dates of Analysis
start  <- '2015-01-01'
today  <- format(Sys.time(),"%Y-%m-%d")
# Fetch Corn and Soybean Prices
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
View(CZ2016)
key <- '79SfoMaQc1npRAuq9ExZ'
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv?79SfoMaQc1npRAuq9ExZ")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv?79SfoMaQc1npRAuq9ExZ")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects, and keep only settlement prices
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
# Trim the dates
CZ2016 <- CZ2016[paste0(start,'/',today)]
View(CZ2016)
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv?79SfoMaQc1npRAuq9ExZ")
CZ2016
install.packages("Quandl")
library(Quandl)
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
mydata = Quandl("CZ2016", type="xts")
?Quandl.api_key
Quandl.api()
Quandl.api_key()
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
CZ2016 <- read.csv(text = CZ2016)
SX2016 <- read.csv(text = SX2016)
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects, and keep only settlement prices
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
library(xtable)
library(ggplot2)
library(ggfortify)
library(gridExtra)
source('data-raw/fetch-raw-data.R')
load('analysis-output/results.Rda')
install.packages("Quandl")
load('analysis-output/results.Rda')
```{r, echo=FALSE, warning = FALSE, message = FALSE, results = "asis"}
t = list()
t[[1]] <- xtable(adf[[1]]@testreg, caption = "ADF Results for Corn")
t[[2]] <- xtable(adf[[2]]@testreg, caption = "ADF Results for Soybeans")
print.xtable(t[[1]], caption.placement = 'top', comment = FALSE)
library(xtable)
library(ggplot2)
library(ggfortify)
library(gridExtra)
t = list()
t[[1]] <- xtable(adf[[1]]@testreg, caption = "ADF Results for Corn")
t[[2]] <- xtable(adf[[2]]@testreg, caption = "ADF Results for Soybeans")
print.xtable(t[[1]], caption.placement = 'top', comment = FALSE)
plot1 <- autoplot(CZ2016, ylab = "Corn Prices, cents/bu") + theme_bw()
plot2 <- autoplot(SX2016, ylab = "Soybean Prices, cents/bu") + theme_bw()
grid.arrange(plot1, plot2, ncol=1)
print.xtable(t[[2]], caption.placement = 'top', comment = FALSE)
source('~/GitHub/research-project-template/data-raw/fetch-raw-data.R')
source('~/GitHub/research-project-template/data-raw/fetch-raw-data.R')
source('~/GitHub/research-project-template/analysis/analysis.R')
source('~/GitHub/research-project-template/analysis/analysis.R')
source('data-raw/fetch-raw-data.R')
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
source('data-raw/fetch-raw-data.R')
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
Quandl.api_key(79SfoMaQc1npRAuq9ExZ)
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
library(xts)
source('~/GitHub/research-project-template/data-raw/fetch-raw-data.R')
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
# Define Dates of Analysis
start  <- '2015-01-01'
today  <- format(Sys.time(),"%Y-%m-%d")
# Fetch Corn and Soybean Prices
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
source('~/GitHub/research-project-template/data-raw/fetch-raw-data.R')
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
# Define Dates of Analysis
start  <- '2015-01-01'
today  <- format(Sys.time(),"%Y-%m-%d")
# Fetch Corn and Soybean Prices
CZ2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/CZ2016.csv")
SX2016 <- getURL("https://www.quandl.com/api/v1/datasets/CME/SX2016.csv")
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
mydata = Quandl("OPEC/ORB")
mydata = Quandl("CME/CZ2016")
View(mydata)
SX2016 <- Quandl("CME/SX2016")
Quandl.api_key("79SfoMaQc1npRAuq9ExZ")
# Define Dates of Analysis
start  <- '2015-01-01'
today  <- format(Sys.time(),"%Y-%m-%d")
# Fetch Corn and Soybean Prices
CZ2016 <- Quandl("CME/CZ2016")
SX2016 <- Quandl("CME/SX2016")
# Define first column to be a date.
CZ2016[,1] <- as.Date(CZ2016[,1])
SX2016[,1] <- as.Date(SX2016[,1])
# Define the data objects to be xts objects, and keep only settlement prices
CZ2016 <- xts(CZ2016[,'Settle'], order.by=CZ2016[,1])
SX2016 <- xts(SX2016[,'Settle'], order.by=SX2016[,1])
# Trim the dates
CZ2016 <- CZ2016[paste0(start,'/',today)]
SX2016 <- SX2016[paste0(start,'/',today)]
CZ2016 <- Quandl("CME/CZ2016", type = "xts")
View(CZ2016)
SX2016 <- Quandl("CME/SX2016", type = "xts")
CZ2016 <- CZ2016[paste0(start,'/',today), Settle]
CZ2016 <- CZ2016[paste0(start,'/',today), 'Settle']
View(CZ2016)
SX2016 <- SX2016[paste0(start,'/',today), 'Settle']
