{
    "contents" : "---\npermalink: /intro-to-r/\nlayout:    default\ntitle:     Introduction to R\nnobio:     true\noutput: md_document\nbibliography: bibliography.bib\n---\n\nGetting Started with R and RStudio\n=============================================\n\nWe will walk through a short introduction to R and\nRStudio. There are many free and comprehensive tutorials available on\nthe web, so our focus here will be to introduce only the concepts and\nfunctionality that we need to get started with price analysis as quickly\nas possible. Readers who come to this book because they want to do price\nanalysis professionally using R will probably want to go back and learn\nR in a more comprehensive way after they have finished *Commodity Price\nAnalysis* and the *R Companion*. At the end of this chapter I list some\nexcellent tutorials available for free on the web, and there are many\nmore not listed here.\n\nBackground\n----------\n\nFor history on the development of R,\n[Wikipedia](https://en.wikipedia.org/wiki/R_(programming_language)) is\nprobably the best source.\n\n> R is a programming language and software environment for statistical\n> computing and graphics. The R language is widely used among\n> statisticians and data miners for developing statistical software and\n> data analysis. ... R is an implementation of the S programming\n> language combined with lexical scoping semantics inspired by Scheme. S\n> was created by John Chambers while at Bell Labs. There are some\n> important differences, but much of the code written for S runs\n> unaltered. R was created by Ross Ihaka and Robert Gentleman at the\n> University of Auckland, New Zealand, and is currently developed by the\n> R Development Core Team, of which Chambers is a member. R is named\n> partly after the first names of the first two R authors and partly as\n> a play on the name of S. R is a GNU project. The source code for the R\n> software environment is written primarily in C, Fortran, and R. R is\n> freely available under the GNU General Public License, and\n> pre-compiled binary versions are provided for various operating\n> systems. R uses a command line interface; there are also several\n> graphical front-ends for it. [Source:\n> Wikipedia](https://en.wikipedia.org/wiki/R_(programming_language))\n\nR as an open source project has been developed for decades now - which\nmeans people have written solutions and made them available for free for\nall kinds of problems related to statistics, programming, analytics and\nmuch more. Whatever kind of work you want to do related to statistics,\nthere is a good chance someone has already done the hard work for you.\nAll you have to do is find it and figure out how to implement it. For\nprice analysis, we will cover the basics here.\n\nR by itself functions through a command line interface, which is not\nvery convenient unless you are very technically inclined. Thankfully,\nthere are several Graphical interfaces (called integrated development\nenvironments (IDE)) which makes life a lot easier. Some key\nfunctionality is available through clickable menus and viewing panes -\njust like the vast majority of software we are used to interacting with.\nMy favorite is RStudio, and it is what we will use throughout this book.\n\nIf you do not have any background programming, this may all sound\ndaunting. Believe me, using R and RStudio is more accessible than it\nsounds. Let jump right in and get started. Since R and RStudio are open\nsource, it is available for free to download.\n\nDownload R\n----------\n\nGo to [<https://www.r-project.org/>](https://www.r-project.org/), where\nthe software is available for downloading.\n\n![Screenshot of r-project.org](images\\Rpojectsite.jpg)\n\nClick \"download R\", and scroll to a server mirror close to you. It does\nnot matter much which one you choose; mirrors that are physically closer\nto you will produce downloads marginally faster, but if you are in the\nUnited States, for example, and you choose any of the mirrors located in\nthe United States, you are not likely to notice a difference.\n\nWhen you click a mirror you will see a screen like the following:\n\n![Screenshot of R Download Links](images\\rdownload.jpg)\n\nClick the link for your appropriate operating system, and click \"base\"\non the next screen. Finally, if you are running windows you will see the\nfollowing screen:\n\n![Screenshot of Windows .exe Download Links](images\\windowsexe.jpg)\n\nClick the *Download R 3.2.1 for Windows* link and run the installation\nfile. Note that the release number may be different since new releases\nof the software periodically come out. Now you have R installed! Now we\nwill install RStudio.\n\nDownload RStudio\n----------------\n\nDownloading RStudio is a bit easier. Go to\n[<https://www.rstudio.com/products/rstudio/download/>](https://www.rstudio.com/products/rstudio/download/)\nand the download links are on one page for all supported operating\nsystems. Click your operating system and run the installation file.\n\n![Screenshot of RStudio Download Links](images\\downloadrstudio.jpg)\n\nCongratulations, you now have R and RStudio installed!\n\nOrienation to the RStudio IDE\n-----------------------------\n\nNow we will get acquainted with the RStudio IDE. First open RStudio. You\nwill see the main window pane divided into three sections. The large\npane on the left is called the *Console*. It is where commands can be\nexecuted within R. In the upper right corner is a pane with\n*Environment* and *History* tabs. The environment will show you what\ndata or variables have been saved into the environment. Since we have\nnot done anything, this is empty. In history tab, a record of every\ncommand given in the console is kept.\n\nThe lower right hand corner holds several tabs: *Files*, *Plots*,\n*Packages*, *Help*, and *Viewer*. More on these things later.\n\n![Screenshot of RStudio](images\\rstudio.png)\n\nThe power of R, is not in the line by line execution of commands, it is\nin writing scripts were commands can be stored and reused. In the upper\nleft hand corner of RStudio, is an icon just below the *File* menu.\nClicking it reveals a menu to open different kinds of script templates.\nClick it and choose *R Script*. The R script will open in the RStudio\nwindow and now there are four panes open. Let's assign the value `2` to\na variable called `x` and the value `3` to a variable called `y`. Then\nwe will add them together and store the result as `z`. This is done by\nusing the characters `<-` together to assign the values to the variable\nnames. Type the following into the R script.\n\n    x <- 2\n    y <- 3\n    z <- x+y\n    z\n\n    ## [1] 5\n\nClick on the *Environment* tab in the upper right hand corner. You will\nsee `x, y, and z` and their values. In this book, notice that output\nfrom R is preceded by '\\#\\#'. The hashtag symbol indicates comments to\nR, so anything to the right of a comment will not be evaluated. This\nfacilitates copy and pasting from this document into the R console,\nsince only the intended input will be evaluated.\n\nFor the exercises that follow, type your commands into the R script file\nto save them for reference. In the top right of the script pane you see\na button labeled 'Run'. If you click it R will execute whatever line of\ncode you are on. Pressing `Ctrl+Enter` does the same. If you click\n'Source', just to the right of 'Run', R will execute the entire file.\n\nPlease create a folder on your computer labeled 'Chapter1' and save this\nR script with the name Chapter1.R.\n\nBasic Calculations\n------------------\n\nIn the Console type the following to get acquainted with performing\narithmetic in R.\n\n    2+2\n\n    ## [1] 4\n\n    6*7\n\n    ## [1] 42\n\n    12/4\n\n    ## [1] 3\n\n    5^2\n\n    ## [1] 25\n\n    sqrt(2)\n\n    ## [1] 1.414214\n\n    log(100)\n\n    ## [1] 4.60517\n\n    exp(4.60517)\n\n    ## [1] 99.99998\n\n    exp(log(100))\n\n    ## [1] 100\n\nDatatypes\n---------\n\nWhen you assign variables or load data into R, it is defined as one of\nseveral datatypes that have specific attributes. Some basic familiarity\nwith R's datatypes is necessary because all R functions expect the\ninputs to be of certain datatypes, and will not run if you give it a\ncharacter when it is expecting an integer, for example.\n\n### Numeric, Integer, and Character, and Logical\n\nThe first four are pretty straightforward. The *Numeric* datatype is for\nfloating decimal, like 2.34. *Integer* variables must be whole numbers,\nand *Character* variables must be character strings like\n`\"Hello World\"`. Logicals are either `TRUE` or `FALSE`.\n\n### Vector\n\nA vector is a datatype that is a sequence of elements of the same type\n(enumerated above).\n\nA vector of numeric elements  \n\n    x <- c(2.3, 4, 6, -10)\n\nThe function, `c()` is the concatenate function. It just takes the\nelements between the comma's and puts them together in one matrix.\n\nA vector of character elements  \n\n    y <- c(\"Hello\", \"My\", \"Name\", \"Is\")\n\nA vector of logical elements  \n\n    z <- c(FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE)\n\n### Matrix\n\nMatrices are simply two dimensional vectors. Since we need to specify\nhow the dimensions work, we will use a specific function for defining a\nmatrix.\n\n    z <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol=2)\n    z\n\n    ##      [,1] [,2]\n    ## [1,]    1    4\n    ## [2,]    2    5\n    ## [3,]    3    6\n\n    z <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol=3)\n    z\n\n    ##      [,1] [,2] [,3]\n    ## [1,]    1    3    5\n    ## [2,]    2    4    6\n\nIt takes a vector one one dimension and allocates it to rows and columns\nas you define in the function arguments. The datatypes of the elements\nof a matrix must be the same type, as is true for vectors.\n\n### List\n\nA list is kind of like a vector, except its elements can be of different\ntypes.\n\n    list1 <- list(x, y, z, 22, \"R is really fun to learn\")\n    list1\n\n    ## [[1]]\n    ## [1]   2.3   4.0   6.0 -10.0\n    ## \n    ## [[2]]\n    ## [1] \"Hello\" \"My\"    \"Name\"  \"Is\"   \n    ## \n    ## [[3]]\n    ##      [,1] [,2] [,3]\n    ## [1,]    1    3    5\n    ## [2,]    2    4    6\n    ## \n    ## [[4]]\n    ## [1] 22\n    ## \n    ## [[5]]\n    ## [1] \"R is really fun to learn\"\n\n### Accessing elements of Vectors, Matrices, and Lists by Index\n\nYou access elements of a vector, matrix, or list by enclosing square\nbrackets around the index number and placing it directly after the\nvariable name. For example, `x` is a vector with 4 elements in it. To\naccess the third element execute the following lines:\n\n    x\n\n    ## [1]   2.3   4.0   6.0 -10.0\n\n    x[3]\n\n    ## [1] 6\n\nFor matrices you have to specify a row and column index. To get the\nelement in row 1 column 2,\n\n    z\n\n    ##      [,1] [,2] [,3]\n    ## [1,]    1    3    5\n    ## [2,]    2    4    6\n\n    z[1,2]\n\n    ## [1] 3\n\nList elements are accessed similarly.\n\n    list1[3]\n\n    ## [[1]]\n    ##      [,1] [,2] [,3]\n    ## [1,]    1    3    5\n    ## [2,]    2    4    6\n\n### Data.frame\n\nData frames in R are conceptually analogous to data you are used to\nseeing organized in an excel spreadsheet. Variables are organized by\ncolumn and observations are organized by row. The columns can be of\ndifferent data types, but rows within one column must be the same. To\nillustrate we will use the mtcars data set, which was extracted from the\n1974 Motor Trend Magazine and contains fuel consumption and 10 other\nvariables. The data set is loaded automatically in the standard R\nillustration, and it the standard example data set most R tutorials\nutilize.\n\n    mtcars\n\n    ##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n    ## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n    ## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n    ## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n    ## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n    ## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n    ## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n    ## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n    ## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n    ## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n    ## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n    ## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n    ## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n    ## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n    ## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n    ## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n    ## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n    ## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n    ## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n    ## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n    ## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n    ## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n    ## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n    ## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n    ## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n    ## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n    ## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n    ## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n    ## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n    ## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n    ## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n    ## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n    ## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\nWe will build our own data frame to build intuition. Suppose we ask 5\npeople (Peter, Paul, Mary, Simon, and Garfunkel), 3 questions. Height?\nWeight? Gender? Columns will represent the variables, and rows will\nrepresent individual answers to those questions. Two new functions\nappear in the code snippet below. `cbind()` takes vectors and binds them\ntogether side by side vertically to form columns of a matrix or table.\nThe function, `data.table()` takes the rectangular object defined by the\n`cbind()` function and makes it into a data frame. The argument,\n`row.names=` defines the row names as our vector of character strings\ncontaining observation identifiers.\n\n    NAMES    <- c(\"Peter\", \"Paul\", \"Mary\", \"Simon\", \"Garfunkel\")\n    Height   <- c(5.8, 5.5, 5.2, 5.5, 5.6)                                          # I'm making up this data...\n    Weight   <- c(150, 155, 120, 145, 160)\n    Gender   <- c(\"Male\", \"Male\", \"Female\", \"Male\", \"Male\")\n\n    DATA     <- data.frame(cbind(Height, Weight, Gender), row.names= NAMES)\n    DATA\n\n    ##           Height Weight Gender\n    ## Peter        5.8    150   Male\n    ## Paul         5.5    155   Male\n    ## Mary         5.2    120 Female\n    ## Simon        5.5    145   Male\n    ## Garfunkel    5.6    160   Male\n\n### Subsetting\n\nThere are many ways to slice and dice data frames. We will just\nintroduce a couple of the most common here. First, if your data frame\nhas column names you can subset off just one column of the data set by,\n\n    DATA$Weight\n\n    ## [1] 150 155 120 145 160\n    ## Levels: 120 145 150 155 160\n\nAlternatively, you can just specify by column number,\n\n    DATA[,2]    # Weight is the second column\n\n    ## [1] 150 155 120 145 160\n    ## Levels: 120 145 150 155 160\n\nIf we want to only see Mary's stats,\n\n    DATA['Mary',]\n\n    ##      Height Weight Gender\n    ## Mary    5.2    120 Female\n\nOr simply specify Mary's row number,\n\n    DATA[3,]\n\n    ##      Height Weight Gender\n    ## Mary    5.2    120 Female\n\nInstall and Load a Package into the Library\n-------------------------------------------\n\nBase R comes with a lot of functionality for statistical analysis, but\nthe beauty of R lies in the packages contributed by the open source\ncommunity. To see what happens if you try to use a function contained in\na package you have not yet installed,\n\n    qplot(DATA$Height)\n\nAnytime you get this error message you know you need to install the\nproper package (or you have a typo!). If you simply Google 'R qplot' you\nwill find the documentation for the function, including the package it\nis in. Try it for `qplot`. `...` so you found it is in a package called\n`ggplot2`, a powerful package for creating excellent graphics. To\ninstall this package and load it into your library, there are two\nmethods.\n\n1.  In the lower right pane of RStudio, click the Packages tab, then\n    click Install. Now type `ggplot2` and install. Now in the package\n    tab, find `ggplot2` in the list of installed packages, click the\n    check box. These actions installed `ggplot2` and loaded it into the\n    library.\n\n2.  Execute the following code:\n\n<!-- -->\n\n    install.packages(\"ggplot2\")\n    library(ggplot2)\n\nNow try the code from above.\n\n    library(ggplot2)\n    qplot(DATA$Height)\n\n![](images/unnamed-chunk-20-1.png)\n\nNow we were able to make a frequency plot for height! It shows how many\nobservations at each height there are in the data set.\n\nSetting up a Project\n--------------------\n\nInitializing an R project is a good way to keep all of your files and\ndirectories straight. It is basically a bundle that saves an image of\nyour entire R session, and sets the directories to a location you\ncreated it in. If you do not do this, you will inevitably lose track of\nwhat file directory R is pointing to. Then you will save data, figures,\nor images in unexpected locations. To get used to working with different\nprojects, we will create a new project for each chapter of this book.\n\n1.  Click `File`, `New Project`\n2.  Choose to save the workspace if prompted.\n3.  choose `Existing Directory` since we already created a Chapter1\n    folder and saved a script to it.\n\nNow you have an R project for Chapter 1 of this book. Make a new folder\nand save an R project to it for each Chapter in the text. We will be\ngenerating file and figures as exercises and arranging R projects this\nway will keep us organized.\n\nOther Resources for Getting Started with R\n------------------------------------------\n\nThis introduction to R is certainly not complete, but it is enough to\nget us up and running to start some basic price analysis in the next\nchapter. As I noted in the beginning of this chapter, there are so many\nfree resources for learning R on the web. With the introduction in this\nchapter, you are well equipped to explore further if you are interested.\nThere are a few of links to get you started.\n\n1.  [R for Data Science](http://r4ds.had.co.nz/) by Garrett Grolemund and Hadley Wickham  \n\n2.    [R Tutorial](http://www.cyclismo.org/tutorial/R/input.html) by Kelly\n    Black, Department of Math at University of Georgia.\n3.  [R Resources](http://www.ats.ucla.edu/stat/r/) by idre and UCLA.\n4.  [Tutorials](http://ww2.coastal.edu/kingw/statistics/R-tutorials/) by\n    William King, Coastal Carolina University\n5.  [CodeSchool](http://tryr.codeschool.com/levels/1/challenges/1) by\n    Code School\n6.  [Quick-R](http://www.statmethods.net/) by Robert Kabacoff\n\n\n\nAnd there are so many more. Feel free to find and explore on your own.\n\nIntroduction to Data Import\n==========================\n\nWe will learn how to import data in a variety of ways, including\nan API (application program interface) call. Using API's greatly reduce\nthe work and time required to get up and running with an analysis, and\nmore entities provide API access all the time.\n\nWe will keep the introduction here to the bare minimum required to get\nus up and running and performing price analysis.\n\nData Import From Files on Your Hard Drive\n-----------------------------------------\n\nBeginning analysis with R usually involves importing data from our hard\ndrive. First we will download some data from [Quandl](Quandl.com).\n\nNavigate to where\n[CZ2015](https://www.quandl.com/data/CME/CZ2015-Corn-Futures-December-2015-CZ2015)\n(December 2015 Corn future) is housed.\n\n![Screenshot of CZ2015 page on Quandl.com](images\\quandlCZ2015.png)\n\nThere is a button that says 'download' above the chart of the prices.\nWhen you click it, you will see file format options. We will work with\nCSV the most, but will learn how to import Excel files as well. We will\nnot use json or XML file formats in this book.\n\n### From Comma Separated Files\n\nLet's begin by loading the price data into R in the CSV format. Click\nthe 'Download' button and then right-click 'CSV'. Choose 'Save Link As'.\nThis gives you the ability to save it directly into your Chapter1 R\nproject folder. If you click 'CSV' instead of right-click, the CSV file\nwill automatically download into your 'Downloads' folder. This is OK,\nbut you will need to go through the extra step of copy and pasting the\nCSV file into your Chapter1 project folder.\n\nNow we have the data on our hard drive, and we will load it into R for\nanalysis! The `read.csv()` function looks for the file `CME-CZ2015.csv`\nin the working directory (file on your hard drive) and loads it into the\nR environment as a data.frame. In the \"Environment\" tab of the upper\nright pane of the RStudio console you should see the variable `CZ2015`.\nIf you hover your mouse over it, RStudio will tell you that it is a\ndata.frame-type variable and its size.\n\n    CZ2015 <- read.csv(file=\"CME-CZ2015.csv\")\n\n    head(CZ2015)\n\n    ##         Date   Open   High    Low   Last Change Settle Volume\n    ## 1 2015-07-27 399.00 399.25 383.00 384.00  19.25 383.50 266575\n    ## 2 2015-07-24 413.75 413.75 402.00 402.75  11.00 402.75 135131\n    ## 3 2015-07-23 413.75 415.50 408.50 413.25   0.25 413.75 127893\n    ## 4 2015-07-22 418.25 418.25 410.25 413.25   4.00 413.50 134747\n    ## 5 2015-07-21 417.50 421.00 413.00 417.50   1.50 417.50 141530\n    ## 6 2015-07-20 428.00 428.50 415.25 416.50  15.25 416.00 190950\n    ##   Open.Interest\n    ## 1        568270\n    ## 2        568386\n    ## 3        574043\n    ## 4        572208\n    ## 5        571192\n    ## 6        557482\n\n    tail(CZ2015)\n\n    ##           Date Open  High Low Last Change Settle Volume Open.Interest\n    ## 905 2011-12-21    0   0.0   0   NA     NA 567.75      0             8\n    ## 906 2011-12-20    0   0.0   0   NA     NA 562.00      0             8\n    ## 907 2011-12-19  555 555.0 555   NA     NA 559.00      1             7\n    ## 908 2011-12-16    0   0.0   0   NA     NA 556.50      0             7\n    ## 909 2011-12-15  545 549.5 545   NA     NA 550.25      7             0\n    ## 910 2011-12-14    0   0.0   0   NA     NA 549.50      0             0\n\nThe `head()` function displays the first five rows of data and the\n`tail()` displays the last five rows. If you want to see more of the\ndata you can click on the variable name in the *Environment* tab. You\ncan see columns for *Date*, *Open*, *High*, *Low*, *Last*, *Change*,\n*Settle*, *Volume*, and *Open Interest*. *Open*, loosely defined, is the\nprice the futures contract was trading at the open of the trading day.\n*High* and *Low* are the highest and lowest prices of the day\nrespectively. *Last* is the price traded at the end of the trading day.\n*Settle* is the price determined by the exchange as the price against\nwhich accounts will be settled. This is usually very close to the last\nprice, but the exchange uses a methodology to arrive at the settle price\nbased on the price at which the contract was trading in the final\nmoments of the trading day. If the close was volatile, as it often is,\nthere can be some difference between the last price and the settle\nprice. *Change* is the difference between today's *Settle* price and\nyesterday's *Settle* price.\n\n### From Microsoft Excel\n\nIt is best practice to always download your data as CSV files for the\nmost flexibility possible. However, R does have the ability to read\nMicrosoft Excel files, and it works very much like reading in CSV files.\nThe function we need to do this does not come in the base R package that\ngets loaded when you install R. We need to *install* the package \"xlsx\"\nand load it into our *library*. Run the two lines of code below and we\nwill be ready to use the `read.xlsx()` function from this package to\nload our `.xls` data file.\n\n    install.packages(\"xlsx\")\n    library(xlsx)\n\nNow that we have the proper package installed, using `read.xlsx()` is\nvery similar to the `read.csv()` function we used before. The only\naddition is that since excel files can have multiple worksheets, we need\nto tell the function which worksheet to import. In our case the data\nfile is simple with only one worksheet, so we just put a 1 in the second\nargument of the function.\n\n     CZ2015 <- read.xlsx(file=\"CME-CZ2015.xls\", 1)\n\nWorking with API's\n------------------\n\nWhen a website has an API set of for their data warehouse, it is easy to\nimport data into a programming environment with script. This saves a lot\nof time navigating and clicking through websites. Since we are learning\nto use R for price analysis, we will definitely want to make use of API\ncalls when we can. We will need to install another package that provides\nfunctionality to extract information from webpages. Install the `RCurl`\npackage and load the library by running the following code.\n\n    install.packages(\"RCurl\")\n    library(RCurl)\n\n### Quandl's API\n\nIn the previous sections we downloaded data from\n[Quandl.com](https://quandl.com) manually. They provide an API we can\nuse to get their data directly into the R environment. To do this we\nwill make use of the `getURL()` function from the `RCurl` package along\nwith the `read.csv()` function we used earlier. Run the following code\nto download the December 2015 corn futures from\n[Quandl.com](https://quandl.com).\n\n    CZ2015 <- getURL(\"https://www.quandl.com/api/v1/datasets/CME/CZ2015.csv\")\n    CZ2015 <- read.csv(text = CZ2015)\n\n    head(CZ2015)\n\n    ##         Date   Open   High    Low   Last Change Settle Volume\n    ## 1 2015-12-14 373.50 381.75 373.50 381.00   8.75 381.75    903\n    ## 2 2015-12-11 377.00 378.75 372.75 373.25   4.25 373.00   2028\n    ## 3 2015-12-10 372.50 379.25 371.75 377.00   5.50 377.25   2543\n    ## 4 2015-12-09 370.75 376.75 368.50 372.25   1.75 371.75   3217\n    ## 5 2015-12-08 369.00 371.00 367.25 370.25   1.50 370.00   2947\n    ## 6 2015-12-07 375.75 376.00 368.00 368.25   7.75 368.50   3271\n    ##   Open.Interest\n    ## 1           816\n    ## 2          2474\n    ## 3          4444\n    ## 4          6411\n    ## 5          7935\n    ## 6          9503\n\nNote that this is the same data we manually downloaded before. To\ndownload a different data set, you just need to adjust the URL in the\n`getURL()` function to point to the right data set. Note the last two\ncomponents of the URL, `CME` and `CZ2015.csv` match the \"Quandl Code\" in\nthe top right corner of [Quandl.com](https://quandl.com).\n\nFor example, if you search on the [Quandl.com](https://quandl.com)\nwebpage for `CME/SX2015` you can find the November 2015 CME soybeans\nfutures contract and see that the \"Quandl Code\" for `SX2015` is\n`CME/SX2015`. Now if we adjust our API call above to point to November\n2015 soybeans, we will have that data as well.\n\n    SX2015 <- getURL(\"https://www.quandl.com/api/v1/datasets/CME/SX2015.csv\")\n    SX2015 <- read.csv(text = SX2015)\n\n    head(SX2015)\n\n    ##         Date   Open   High    Low   Last Change Settle Volume\n    ## 1 2015-11-13 871.75 871.75 860.50 860.50  10.25 859.00    110\n    ## 2 2015-11-12 869.75 874.75 865.25 869.75   0.75 869.25    925\n    ## 3 2015-11-11 865.75 869.75 863.50 868.50   4.00 868.50    763\n    ## 4 2015-11-10 875.00 875.25 859.25 866.00   9.00 864.50   1241\n    ## 5 2015-11-09 872.00 877.25 871.25 874.00   2.25 873.50   2312\n    ## 6 2015-11-06 868.00 873.00 863.25 871.25   3.50 871.25   1327\n    ##   Open.Interest\n    ## 1            93\n    ## 2           978\n    ## 3          1997\n    ## 4          3313\n    ## 5          4324\n    ## 6          5260\n\nAnd now use the API call to get December 2015 soft red winter wheat\nfutures.\n\n    WZ2015 <- getURL(\"https://www.quandl.com/api/v1/datasets/CME/WZ2015.csv\")\n    WZ2015 <- read.csv(text = WZ2015)\n\n    head(WZ2015)\n\n    ##         Date   Open   High    Low   Last Change Settle Volume\n    ## 1 2015-12-14 488.00 490.50 488.00 488.75   5.00 487.75     15\n    ## 2 2015-12-11 487.50 491.25 480.00 480.50   1.75 482.75     46\n    ## 3 2015-12-10 478.50 487.75 476.75 487.75   6.50 484.50     32\n    ## 4 2015-12-09 469.75 479.75 469.75 476.00   7.25 478.00     36\n    ## 5 2015-12-08 471.00 471.75 466.50 470.25   0.50 470.75    134\n    ## 6 2015-12-07 474.75 474.75 471.25 471.25   1.00 470.25    284\n    ##   Open.Interest\n    ## 1            15\n    ## 2            67\n    ## 3            86\n    ## 4           174\n    ## 5           382\n    ## 6           346\n\n### USDA API's\n\nSome of the Services within the USDA provide API access to their data\nsets. The [USDA Open Data\nCatalog](http://www.usda.gov/wps/portal/usda/usdahome?navid=data) is a\ncollection of all the publicly avaiable USDA datasets. If you click on\nthe links you will often just go to the web-frontend of a queryable\ndatabase. However, there are two links at the top of the webpage that\nsay 'XML Version' and 'JSON Version'. These links are useful for\naccessing the API's that will either allow you to download data directly\ninto the R environment or reveals the URL that will automatically\ndownload the data in .csv or other useful format that is easily then\nimported into the R environment.\n\n<!-- Feedgrains database available here. Historical balance sheet categories-->\n<!-- http://www.gipsa.usda.gov/fgis/exportgrain/CY2015.csv  URL format of GIPSA export inspections-->\nThe URL to use the USDA NASS API for *Corn Ave Prices Received* is not\nas simple as the Quandl API above.[1] To use the USDA API's you need to\nrequest and authentication code. This allows the USDA to keep track of\nwho is accessing the data and make protect against attacks on the data\nservers. To request an API, click *obtain an API key* on the\n[<http://quickstats.nass.usda.gov/api>](http://quickstats.nass.usda.gov/api).\nThen enter the requested information. You will receive an email with the\nAPI key. The code below will download the *Average Prices Recieved by\nFarmers* for *Corn* in *Iowa* from *1980* to the present. Of course,\ncopy and paste your own api key in the link.\n\n    library(RCurl)\n    IAPrice <- getURL(\"https://quickstats.nass.usda.gov/api/api_GET/?key=yourapikey&commodity_desc=CORN&year__GE=1980&state_alpha=IA&format=CSV&statisticcat_desc=PRICE%20RECEIVED\")\n    IAPrice <- read.csv(text = IAPrice)\n\n    head(IAPrice, 10)\n\nClick on the *Environment* tab in RStudio and click `IAPrice` in the\n*Data* section. This will open up the data in RStudio's data viewer.\nThis is not quite as functional as Microsoft Excel, but it is handy to\nverify what you downloaded looks as you expect it to.\n\nGraphing Basics\n---------------\n\nThe final topic we will cover in this chapter is basic plotting. Above,\nwe already used `qplot()` from the `ggplot2` package to plot a frequency\nchart. The function below, `plot()`, comes installed with base R, so no\nneed to install any packages before calling the function. We will plot\nthe corn price data we imported previously in the chapter. It should be\nstored as a variable called `CZ2015`. We will plot the *Settle* prices\nover time. The `plot()` function takes to arguments. It needs a variable\nto plot along the x-axis and a variable to plot along the y-axis. We\nwill put *Date* along the x-axis and *Settle* prices along the y-axis.\n\n     library(RCurl)\n    CZ2015 <- getURL(\"https://www.quandl.com/api/v1/datasets/CME/CZ2015.csv\")\n\n    plot(CZ2015$Dat, CZ2015$Settle)\n\n     library(RCurl)\n    CZ2015 <- getURL(\"https://www.quandl.com/api/v1/datasets/CME/CZ2015.csv\")\n\n    plot(CZ2015$Date, CZ2015$Settle)\n\n![](images/unnamed-chunk-9-1.png)\n\nThis plot is OK, but it is not exactly up to par when you think about\nwhat charts in finance, for example, usually look like. The `quantmod`\npackage has become the most popular R package for charting. Go ahead and\ninstall it an load it into your library.\n\n    install.packages(\"quantmod\")\n    install.packages(\"xts\")\n    library(quantmod)\n    library(xts)\n\nNow, lets plot December 2015 wheat prices that we imported earlier. To\ndo this we will use the function `chartSeries()` from the `quantmod`\npackage. It expects data to be a time series, and it expects to receive\nOpen, High, Low, Close, and Volume.\n\n    library(quantmod)\n    WZ2015_chart <- subset(WZ2015, select= -c(Date, Change, Last, Open.Interest))      \n    WZ2015_chart <- xts(WZ2015_chart, order.by = as.Date(WZ2015$Date))    \n    colnames(WZ2015_chart)[4] <- \"Close\"    \n\n    chartSeries(WZ2015_chart['2015-01-01/'], type = \"candlesticks\", theme = chartTheme(\"white\"))\n\nThere is a lot going on in this code chunk, actually. Let us go through\nthe details, but what we just did is pretty advanced so do not feel\noverwhelmed. This was mostly to show you what is possible with financial\ndata. To give you some perspective, it took me about an hour to search\naround and get the details right.\n\nThe three first lines are all prepping the data to put it into the\nformat the `chartSeries()` function expects.\n\n1.  In the first line we removed the columns Date, Change, Last,\n    Open.Interest because we need only Open, High, Low, Close.\n2.  The second line does two things. It defines `WZ2015_chart` as an xts\n    time series object, which is just a special class of object in R. It\n    has attributes some functions written especially for time series\n    data can utilize. The second argument of the `xts()` function uses\n    `order.by` to indicate the `WZ2015$Date` variable should be used as\n    the date index. and the `as.Date()` function puts the data in a\n    proper format the `xts()` function recognizes.\n3.  The third line changes the column named \"Settle\", which is the 4th\n    column to \"Close\". This is because `chartSeries()` wants to see\n    columns Open, High, Low, Close, and Volume.\n\n![](images/unnamed-chunk-12-1.png)\n\n[1] Documentation for the USDA NASS API can be found\n<http://quickstats.nass.usda.gov/api>. At this point, do not worry about\nunderstanding how to make sense of the documentation. This is simply a\nreference for your possible future use. I will provide all the correct\nURLs in the text.\n\n> Be sure to 'Save Workspace Image' when you close the program!\n",
    "created" : 1462565581146.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2833676953",
    "id" : "B7840827",
    "lastKnownWriteTime" : 1462565730,
    "path" : "~/GitHub/research-project-template/_pages/intro-to-r.Rmd",
    "project_path" : "_pages/intro-to-r.Rmd",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "type" : "r_markdown"
}